if(!require(Antler)){
devtools::install_github("juliendelile/Antler")
}
input_dir = '../input/'
output_dir = '../gene_module_time_course/'
m = Antler$new(plot_folder=paste0(output_dir,"plots"))
m$loadDataset(folderpath=paste0(output_dir,"data"),data_status='Normalized')
hvf_info = HVFInfo(object = OsC)
library(Seurat)
library(Antler)
hvf_info = HVFInfo(object = OsC)
load(paste0(input_dir,'vpl330.Seurat.Robj'))
hvf_info = HVFInfo(object = OsC)
hvf_info$variance.norm = hvf_info$variance.standardized
hvf_info$variance.norm[hvf_info$variance.norm > 10] = 10
hvf_info$variance.zscore = (hvf_info$variance.standardized - median(hvf_info$variance.standardized))/mad(hvf_info$variance.standardized)
dispersed_genes = rownames(hvf_info)[hvf_info$variance.zscore > 0.5]
length(rownames(hvf_info)[hvf_info$variance > 0.5])
m$filterGenes(dispersed_genes)
m$identifyGeneModules(
method="TopCorr_DR",
corr_t = 0.3, # the Spearman correlation threshold
topcorr_corr_min = 3, # minimum number of genes a gene should be correlated with
topcorr_mod_min_cell = 0, # minimum number of cells with "positive" binarized level per gene module
topcorr_mod_consistency_thres = 0.3, # ratio of expressed genes among "positive" cells per gene module
data_status='Normalized'
)
saveRDS(m,paste0(output_dir,"antler_object.rds"))
m$writeGeneModules(basename="UnbiasedGMs", gms='topCorr_DR.genemodules')
#Hierachical clustering using genes from gene modules to create heat map.
m$identifyCellClusters(method='hclust', used_genes="topCorr_DR.genemodules", data_status='Normalized')
#Only display genes associated with particular go terms on the plot labels.
#The actual plot is not affected.
#Here we label "Nervous system development", "Cell differentiation" and "Cell migration" genes.
displayed_genes = getGenesFromGOterms(c('GO:0007399', 'GO:0030154', 'GO:0016477'))
m$plotGeneModules(basename='UnbiasedGMs',
displayed.gms = c('topCorr_DR.genemodules'),
displayed.geneset=displayed_genes,
use.dendrogram='hclust',
display.clusters='hclust',
display.legend=T,
file_settings=list(list(type='pdf', width=25, height=35)),
data_status=c('Normalized'),
gene_transformations='logscaled',
pretty.params=list("size_factor"=8, "ngenes_per_lines" = 15, "side.height.fraction"=.1),
)
"Csde1" %in% dispersed_genes
library(Seurat)
library(Antler)
input_dir = '../input/'
output_dir = '../gene_module_treatment/'
load(paste0(input_dir,'vpl329.Seurat.Robj'))
# This loads the Seurat object OsC
#get the count matrix - we need to convert from sparse to dense
mat = as.matrix(GetAssayData(OsC, assay = "RNA"))
#could  also use normalised data however
#this is only available for 2000 genes in the integrated
#object. Here we proceed with the unormalised data and
#normalise later in Antler
# get phenotype data
pheno = OsC@meta.data
#Set dummy values for any of "timepoint", "treatment" and "replicate_id"
#which are not relevant to data.
#Here we are setting "timepoint" based on "treatment" as this will allow
#for the generation of a colour bar indicating each condition on the output
#plot.
pheno$timepoint = pheno$orig.ident
pheno$timepoint[pheno$timepoint == "DIV20_DMSO"] = 1
pheno$timepoint[pheno$timepoint == "DIV20_RA"] = 2
pheno$replicate_id = 1
pheno$treatment = pheno$orig.ident
pheno$index = rownames(pheno)
#extract relevant columns
pheno = pheno[c('index','timepoint', 'replicate_id','treatment')]
#order pheno data so samples are in the same order as the count matrix.
pheno = pheno[colnames(mat),]
#create folder to store data
dir.create(paste0(output_dir,"data")
write.table(pheno, paste0(output_dir,"data/phenoData.csv"), sep = '\t',quote = F, row.names = F)
dir.create(paste0(output_dir,"data"))
write.table(pheno, paste0(output_dir,"data/phenoData.csv"), sep = '\t',quote = F, row.names = F)
write.table(mat,output_dir,"data/assayData.csv"), sep = '\t')
write.table(mat,paste0(output_dir,"data/assayData.csv")), sep = '\t')
write.table(pheno, paste0(output_dir,"data/phenoData.csv"), sep = '\t',quote = F, row.names = F)
write.table(mat,paste0(output_dir,"data/assayData.csv"), sep = '\t')
m = Antler$new(plot_folder=paste0(output_dir,"plots"))
m$loadDataset(folderpath=paste0(output_dir,"data"),data_status='Normalized')
hvf_info = HVFInfo(object = OsC)
hvf_info$variance.zscore = (hvf_info$variance.standardized - median(hvf_info$variance.standardized))/mad(hvf_info$variance.standardized)
dispersed_genes = rownames(hvf_info)[hvf_info$variance.zscore > 0.5]
length(rownames(hvf_info)[hvf_info$variance > 0.5])
m$filterGenes(dispersed_genes)
m$identifyGeneModules(
method="TopCorr_DR",
corr_t = 0.3, # the Spearman correlation threshold
topcorr_corr_min = 3, # minimum number of genes a gene should be correlated with
topcorr_mod_min_cell = 0, # minimum number of cells with "positive" binarized level per gene module
topcorr_mod_consistency_thres = 0.3, # ratio of expressed genes among "positive" cells per gene module
data_status='Normalized'
)
saveRDS(m,paste0(output_dir,"antler_object.rds"))
m$writeGeneModules(basename="UnbiasedGMs", gms='topCorr_DR.genemodules')
#Hierachical clustering using genes from gene modules to create heat map.
m$identifyCellClusters(method='hclust', used_genes="topCorr_DR.genemodules", data_status='Normalized')
#Only display genes associated with particular go terms on the plot labels.
#The actual plot is not affected.
#Here we label "Nervous system development", "Cell differentiation" and "Cell migration" genes.
displayed_genes = getGenesFromGOterms(c('GO:0007399', 'GO:0030154', 'GO:0016477'))
m$plotGeneModules(basename='UnbiasedGMs',
displayed.gms = c('topCorr_DR.genemodules'),
displayed.geneset=dispersed_genes,
use.dendrogram='hclust',
display.clusters='hclust',
display.legend=T,
file_settings=list(list(type='pdf', width=25, height=35)),
data_status=c('Normalized'),
gene_transformations='logscaled',
pretty.params=list("size_factor"=8, "ngenes_per_lines" = 15, "side.height.fraction"=.1),
)
library(Seurat)
setwd('/home/anna/Documents/single_cell_analysis/glia_new/data')
HP1 = read.csv('HP_1_counts.tsv', sep = '\t')
HP2 = read.csv('HP_2_counts.tsv', sep = '\t')
HP3 = read.csv('HP_3_counts.tsv', sep = '\t')
C = read.csv('C_counts.tsv', sep = '\t')
all = merge(HP1,HP2, by = "gene")
all = merge(all,HP3, by = "gene")
all = merge(all,C, by = "gene")
tail(all$gene)
sample_info = read.csv("/home/anna/Documents/ENS_data_summary/project-PRO472-sample-sheet.csv")
sample_info$Sample.Name
get_cell_num = function(x){
return(strsplit(x,'_')[[1]][1])
}
unique(sample_info$n_cell)
sample_info$n_cell = as.character(lapply(as.character(sample_info$Sample.Name),get_cell_num))
failed = subset(sample_info,!(sample_info$n_cell %in% c("1","1S","1?","1Irr","1+D","1L","1B")))
failed_samples = substring(failed$Sample.LIMSID,7)
failed_samples = paste0("C_",failed_samples)
batch_1 = subset(sample_info,sample_info$Container.Name %in% c("FP1_FL020817","FP2_FL020817"))
batch_2 = subset(sample_info,sample_info$Container.Name %in% c("FP1_FL140817","FP2_FL140817"))
batch_1_samples = substring(batch_1$Sample.LIMSID,7)
batch_2_samples = substring(batch_2$Sample.LIMSID,7)
batch_1_samples = paste0("C_",batch_1_samples)
batch_2_samples = paste0("C_",batch_2_samples)
mat = as.matrix(all[,2:ncol(all)])
rownames(mat) = all$gene
colnames(mat) = colnames(all)[2:ncol(all)]
mat = mat[,!(colnames(mat) %in% failed_samples)]
add_batch = function(x,batch){
info = strsplit(x,'_')[[1]]
return(paste(info[1],batch,info[2],sep = '_'))
}
colnames(mat)[colnames(mat) %in% batch_1_samples] =
as.character(lapply(colnames(mat)[colnames(mat) %in% batch_1_samples], add_batch, "1"))
colnames(mat)[colnames(mat) %in% batch_2_samples] =
as.character(lapply(colnames(mat)[colnames(mat) %in% batch_2_samples], add_batch, "2"))
is.ercc <- which(grepl("^ERCC", rownames(mat)))
mat = mat[!(grepl("^ERCC", rownames(mat))),]
macrophage_clusters = kmeans(mat["ENSMUSG00000030786",],2)
mat = mat[,!(mat["ENSMUSG00000030786",] >10)]
#mat = mat[rowSums(mat) > 9,]
mat = mat[rowSums(mat) > 0,]
library(biomaRt)
ensembl = useMart("ensembl", dataset='mmusculus_gene_ensembl')
gene_names_ids.df=getBM(c("ensembl_gene_id", "external_gene_name"), mart= ensembl)#,filters = "ensembl_gene_id", values = rownames(data), mart= ensembl)
gene_names_ids.df[gene_names_ids.df$external_gene_name == "",]
#get gene ids
gene_id = as.data.frame(rownames(mat))
names(gene_id) = "ensembl_gene_id"
library(plyr)
#gene_id = merge(gene_id,gene_names_ids.df, by = "ensembl_gene_id", all.x = T)
gene_id = join(gene_id,gene_names_ids.df, by = "ensembl_gene_id")
gene_id$external_gene_name[is.na(gene_id$external_gene_name)] = gene_id$ensembl_gene_id[is.na(gene_id$external_gene_name)]
sum(is.na(gene_id$external_gene_name))
gene_id[is.na(gene_id$external_gene_name),]
gene_id$external_gene_name = make.unique(gene_id$external_gene_name)
gene_id$external_gene_name
rownames(mat) = gene_id$external_gene_name
library(TxDb.Mmusculus.UCSC.mm10.ensGene)
library(Seurat)
data <- CreateSeuratObject(counts = mat)
##define mitochondrial genes
location <- select(TxDb.Mmusculus.UCSC.mm10.ensGene, keys=as.character(gene_id$ensembl_gene_id),
column="CDSCHROM", keytype="GENEID")
#location <- location[match(rownames(data), location$GENEID),]
location <- location[match(as.character(gene_id$ensembl_gene_id), location$GENEID),]
is.mito <- location$CDSCHROM == "chrM" & !is.na(location$CDSCHROM)
is.ercc <- which(grepl("^ERCC", gene_id$ensembl_gene_id))
data[["percent.mt"]] <- PercentageFeatureSet(data, features = rownames(data)[is.mito])
data[["percent.ercc"]]<- PercentageFeatureSet(data,  pattern = "^ERCC-")
setwd("../output")
pdf("quality_metrics")
VlnPlot(data, features = c("nFeature_RNA", "nCount_RNA", "percent.mt","percent.ercc"), ncol = 2,nrow = 2)
dev.off()
VlnPlot(data, features = c("percent.ercc"), ncol = 1)
data = data[!(rownames(data) %in% rownames(data)[is.ercc]),]
plot1 <- FeatureScatter(data, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(data, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
CombinePlots(plots = list(plot1, plot2))
### dim(data)
#[1] 33244   489
#data[["endogenous_counts"]]<- PercentageFeatureSet(data,  features = rownames(data))
#FeatureScatter(data, feature1 = "endogenous_counts", feature2 = "percent.mt")
#data <- subset(data, subset = nCount_RNA > 500000 & percent.mt < 10)
data <- subset(data, subset = nFeature_RNA > 2000 & percent.mt < 10)
###dim(data)
#[1] 33244   297
data = data[rowSums(data) >= 10,]
#dim(data)
#[1] 23604   297
n_cells_exp_gene = rowSums(GetAssayData(data) > 0)
data = data[n_cells_exp_gene >= 3,]
#dim(data)
#[1] 21251   297
data <- NormalizeData(data, normalization.method = "LogNormalize", scale.factor = 10000)
data <- FindVariableFeatures(data, selection.method = "vst", nfeatures = 2000)
top10 <- head(VariableFeatures(data), 10)
substr(colnames(data),1,1)
data$condition = substr(colnames(data),1,1)
data$batch = substr(colnames(data),1,4)
all.genes <- rownames(data)
data <- ScaleData(data, features = all.genes)#, vars.to.regress = c("percent.mt"))
data <- RunPCA(data, features = VariableFeatures(object = data))
data<- FindNeighbors(data, dims = 1:9)
data <- FindClusters(data)
data <- RunUMAP(data, dims = 1:9, seed.use = 1)
DimPlot(data, reduction = "umap",
group.by = c("RNA_snn_res.0.8","condition","batch"))
FeaturePlot(data, features = c("nCount_RNA"))
FeaturePlot(data, features = c("percent.mt"))
dim(data)
data<- FindNeighbors(data, dims = 1:9)
data <- FindClusters(data)
data <- RunUMAP(data, dims = 1:9, seed.use = 42)
DimPlot(data, reduction = "umap",
group.by = c("RNA_snn_res.0.8","condition","batch"))
FeaturePlot(data, features = c("nCount_RNA"))
FeaturePlot(data, features = c("percent.mt"))
library(Seurat)
setwd('/home/anna/Documents/single_cell_analysis/glia_new/data')
HP1 = read.csv('HP_1_counts.tsv', sep = '\t')
HP2 = read.csv('HP_2_counts.tsv', sep = '\t')
HP3 = read.csv('HP_3_counts.tsv', sep = '\t')
C = read.csv('C_counts.tsv', sep = '\t')
all = merge(HP1,HP2, by = "gene")
all = merge(all,HP3, by = "gene")
all = merge(all,C, by = "gene")
tail(all$gene)
sample_info = read.csv("/home/anna/Documents/ENS_data_summary/project-PRO472-sample-sheet.csv")
sample_info$Sample.Name
get_cell_num = function(x){
return(strsplit(x,'_')[[1]][1])
}
unique(sample_info$n_cell)
sample_info$n_cell = as.character(lapply(as.character(sample_info$Sample.Name),get_cell_num))
failed = subset(sample_info,!(sample_info$n_cell %in% c("1","1S","1?","1Irr","1+D","1L","1B")))
failed_samples = substring(failed$Sample.LIMSID,7)
failed_samples = paste0("C_",failed_samples)
batch_1 = subset(sample_info,sample_info$Container.Name %in% c("FP1_FL020817","FP2_FL020817"))
batch_2 = subset(sample_info,sample_info$Container.Name %in% c("FP1_FL140817","FP2_FL140817"))
batch_1_samples = substring(batch_1$Sample.LIMSID,7)
batch_2_samples = substring(batch_2$Sample.LIMSID,7)
batch_1_samples = paste0("C_",batch_1_samples)
batch_2_samples = paste0("C_",batch_2_samples)
mat = as.matrix(all[,2:ncol(all)])
rownames(mat) = all$gene
colnames(mat) = colnames(all)[2:ncol(all)]
mat = mat[,!(colnames(mat) %in% failed_samples)]
add_batch = function(x,batch){
info = strsplit(x,'_')[[1]]
return(paste(info[1],batch,info[2],sep = '_'))
}
colnames(mat)[colnames(mat) %in% batch_1_samples] =
as.character(lapply(colnames(mat)[colnames(mat) %in% batch_1_samples], add_batch, "1"))
colnames(mat)[colnames(mat) %in% batch_2_samples] =
as.character(lapply(colnames(mat)[colnames(mat) %in% batch_2_samples], add_batch, "2"))
is.ercc <- which(grepl("^ERCC", rownames(mat)))
mat = mat[!(grepl("^ERCC", rownames(mat))),]
macrophage_clusters = kmeans(mat["ENSMUSG00000030786",],2)
mat = mat[,!(mat["ENSMUSG00000030786",] >10)]
#mat = mat[rowSums(mat) > 9,]
mat = mat[rowSums(mat) > 0,]
library(biomaRt)
ensembl = useMart("ensembl", dataset='mmusculus_gene_ensembl')
gene_names_ids.df=getBM(c("ensembl_gene_id", "external_gene_name"), mart= ensembl)#,filters = "ensembl_gene_id", values = rownames(data), mart= ensembl)
gene_names_ids.df[gene_names_ids.df$external_gene_name == "",]
#get gene ids
gene_id = as.data.frame(rownames(mat))
names(gene_id) = "ensembl_gene_id"
library(plyr)
#gene_id = merge(gene_id,gene_names_ids.df, by = "ensembl_gene_id", all.x = T)
gene_id = join(gene_id,gene_names_ids.df, by = "ensembl_gene_id")
gene_id$external_gene_name[is.na(gene_id$external_gene_name)] = gene_id$ensembl_gene_id[is.na(gene_id$external_gene_name)]
sum(is.na(gene_id$external_gene_name))
gene_id[is.na(gene_id$external_gene_name),]
gene_id$external_gene_name = make.unique(gene_id$external_gene_name)
gene_id$external_gene_name
rownames(mat) = gene_id$external_gene_name
library(TxDb.Mmusculus.UCSC.mm10.ensGene)
library(Seurat)
data <- CreateSeuratObject(counts = mat)
##define mitochondrial genes
location <- select(TxDb.Mmusculus.UCSC.mm10.ensGene, keys=as.character(gene_id$ensembl_gene_id),
column="CDSCHROM", keytype="GENEID")
#location <- location[match(rownames(data), location$GENEID),]
location <- location[match(as.character(gene_id$ensembl_gene_id), location$GENEID),]
is.mito <- location$CDSCHROM == "chrM" & !is.na(location$CDSCHROM)
is.ercc <- which(grepl("^ERCC", gene_id$ensembl_gene_id))
data[["percent.mt"]] <- PercentageFeatureSet(data, features = rownames(data)[is.mito])
data[["percent.ercc"]]<- PercentageFeatureSet(data,  pattern = "^ERCC-")
setwd("../output")
pdf("quality_metrics")
VlnPlot(data, features = c("nFeature_RNA", "nCount_RNA", "percent.mt","percent.ercc"), ncol = 2,nrow = 2)
dev.off()
VlnPlot(data, features = c("percent.ercc"), ncol = 1)
data = data[!(rownames(data) %in% rownames(data)[is.ercc]),]
plot1 <- FeatureScatter(data, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(data, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
CombinePlots(plots = list(plot1, plot2))
### dim(data)
#[1] 33244   489
#data[["endogenous_counts"]]<- PercentageFeatureSet(data,  features = rownames(data))
#FeatureScatter(data, feature1 = "endogenous_counts", feature2 = "percent.mt")
#data <- subset(data, subset = nCount_RNA > 500000 & percent.mt < 10)
data <- subset(data, subset = nFeature_RNA > 2000 & percent.mt < 10)
###dim(data)
#[1] 33244   297
data = data[rowSums(data) >= 10,]
#dim(data)
#[1] 23604   297
n_cells_exp_gene = rowSums(GetAssayData(data) > 0)
data = data[n_cells_exp_gene >= 3,]
#dim(data)
#[1] 21251   297
data <- NormalizeData(data, normalization.method = "LogNormalize", scale.factor = 10000)
data <- FindVariableFeatures(data, selection.method = "vst", nfeatures = 2000)
top10 <- head(VariableFeatures(data), 10)
substr(colnames(data),1,1)
data$condition = substr(colnames(data),1,1)
data$batch = substr(colnames(data),1,4)
all.genes <- rownames(data)
data <- ScaleData(data, features = all.genes)#, vars.to.regress = c("percent.mt"))
data <- RunPCA(data, features = VariableFeatures(object = data))
data <- JackStraw(data, num.replicate = 1000)
data <- ScoreJackStraw(data, dims = 1:20)
JackStrawPlot(data, dims = 1:20)
ElbowPlot(data)
data<- FindNeighbors(data, dims = 1:9)
data <- FindClusters(data)
data <- RunUMAP(data, dims = 1:9, seed.use = 1)
DimPlot(data, reduction = "umap",
group.by = c("RNA_snn_res.0.8","condition","batch"))
library(Seurat)
setwd('/home/anna/Documents/single_cell_analysis/glia_new/data')
HP1 = read.csv('HP_1_counts.tsv', sep = '\t')
HP2 = read.csv('HP_2_counts.tsv', sep = '\t')
HP3 = read.csv('HP_3_counts.tsv', sep = '\t')
C = read.csv('C_counts.tsv', sep = '\t')
all = merge(HP1,HP2, by = "gene")
all = merge(all,HP3, by = "gene")
all = merge(all,C, by = "gene")
tail(all$gene)
sample_info = read.csv("/home/anna/Documents/ENS_data_summary/project-PRO472-sample-sheet.csv")
sample_info$Sample.Name
get_cell_num = function(x){
return(strsplit(x,'_')[[1]][1])
}
unique(sample_info$n_cell)
sample_info$n_cell = as.character(lapply(as.character(sample_info$Sample.Name),get_cell_num))
failed = subset(sample_info,!(sample_info$n_cell %in% c("1","1S","1?","1Irr","1+D","1L","1B")))
failed_samples = substring(failed$Sample.LIMSID,7)
failed_samples = paste0("C_",failed_samples)
batch_1 = subset(sample_info,sample_info$Container.Name %in% c("FP1_FL020817","FP2_FL020817"))
batch_2 = subset(sample_info,sample_info$Container.Name %in% c("FP1_FL140817","FP2_FL140817"))
batch_1_samples = substring(batch_1$Sample.LIMSID,7)
batch_2_samples = substring(batch_2$Sample.LIMSID,7)
batch_1_samples = paste0("C_",batch_1_samples)
batch_2_samples = paste0("C_",batch_2_samples)
mat = as.matrix(all[,2:ncol(all)])
rownames(mat) = all$gene
colnames(mat) = colnames(all)[2:ncol(all)]
mat = mat[,!(colnames(mat) %in% failed_samples)]
add_batch = function(x,batch){
info = strsplit(x,'_')[[1]]
return(paste(info[1],batch,info[2],sep = '_'))
}
colnames(mat)[colnames(mat) %in% batch_1_samples] =
as.character(lapply(colnames(mat)[colnames(mat) %in% batch_1_samples], add_batch, "1"))
colnames(mat)[colnames(mat) %in% batch_2_samples] =
as.character(lapply(colnames(mat)[colnames(mat) %in% batch_2_samples], add_batch, "2"))
is.ercc <- which(grepl("^ERCC", rownames(mat)))
mat = mat[!(grepl("^ERCC", rownames(mat))),]
macrophage_clusters = kmeans(mat["ENSMUSG00000030786",],2)
mat = mat[,!(mat["ENSMUSG00000030786",] >10)]
#mat = mat[rowSums(mat) > 9,]
mat = mat[rowSums(mat) > 0,]
library(biomaRt)
ensembl = useMart("ensembl", dataset='mmusculus_gene_ensembl')
gene_names_ids.df=getBM(c("ensembl_gene_id", "external_gene_name"), mart= ensembl)#,filters = "ensembl_gene_id", values = rownames(data), mart= ensembl)
gene_names_ids.df[gene_names_ids.df$external_gene_name == "",]
#get gene ids
gene_id = as.data.frame(rownames(mat))
names(gene_id) = "ensembl_gene_id"
library(plyr)
#gene_id = merge(gene_id,gene_names_ids.df, by = "ensembl_gene_id", all.x = T)
gene_id = join(gene_id,gene_names_ids.df, by = "ensembl_gene_id")
gene_id$external_gene_name[is.na(gene_id$external_gene_name)] = gene_id$ensembl_gene_id[is.na(gene_id$external_gene_name)]
sum(is.na(gene_id$external_gene_name))
gene_id[is.na(gene_id$external_gene_name),]
gene_id$external_gene_name = make.unique(gene_id$external_gene_name)
gene_id$external_gene_name
rownames(mat) = gene_id$external_gene_name
library(TxDb.Mmusculus.UCSC.mm10.ensGene)
library(Seurat)
data <- CreateSeuratObject(counts = mat)
location <- select(TxDb.Mmusculus.UCSC.mm10.ensGene, keys=as.character(gene_id$ensembl_gene_id),
column="CDSCHROM", keytype="GENEID")
#location <- location[match(rownames(data), location$GENEID),]
location <- location[match(as.character(gene_id$ensembl_gene_id), location$GENEID),]
is.mito <- location$CDSCHROM == "chrM" & !is.na(location$CDSCHROM)
is.ercc <- which(grepl("^ERCC", gene_id$ensembl_gene_id))
data[["percent.mt"]] <- PercentageFeatureSet(data, features = rownames(data)[is.mito])
data[["percent.ercc"]]<- PercentageFeatureSet(data,  pattern = "^ERCC-")
VlnPlot(data, features = c("nFeature_RNA", "nCount_RNA", "percent.mt","percent.ercc"), ncol = 2,nrow = 2)
data = data[!(rownames(data) %in% rownames(data)[is.ercc]),]
plot1 <- FeatureScatter(data, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(data, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
CombinePlots(plots = list(plot1, plot2))
#data <- subset(data, subset = nCount_RNA > 500000 & percent.mt < 10)
data <- subset(data, subset = nFeature_RNA > 2000 & percent.mt < 10)
dim(data)
data = data[rowSums(data) >= 10,]
n_cells_exp_gene = rowSums(GetAssayData(data) > 0)
data = data[n_cells_exp_gene >= 3,]
dim(data)
data <- NormalizeData(data, normalization.method = "LogNormalize", scale.factor = 10000)
data <- FindVariableFeatures(data, selection.method = "vst", nfeatures = 2000)
top10 <- head(VariableFeatures(data), 10)
substr(colnames(data),1,1)
data$condition = substr(colnames(data),1,1)
data$batch = substr(colnames(data),1,4)
all.genes <- rownames(data)
data <- ScaleData(data, features = all.genes)#, vars.to.regress = c("percent.mt"))
data <- RunPCA(data, features = VariableFeatures(object = data))
for (i in 4:20){
data<- FindNeighbors(data, dims = 1:i)
data <- FindClusters(data)
data <- RunUMAP(data, dims = 1:i, seed.use = 1)
pdf(paste0("./seed_1_v2/umap_louvain_seed_1_", i, ".pdf"))
p = DimPlot(data, reduction = "umap",
group.by = c("RNA_snn_res.0.8","condition","batch"))
print(p)
dev.off()
}
getwd()
for (i in 4:20){
data<- FindNeighbors(data, dims = 1:i)
data <- FindClusters(data)
data <- RunUMAP(data, dims = 1:i, seed.use = 1)
pdf(paste0("./output/seed_1_v2/umap_louvain_seed_1_", i, ".pdf"))
p = DimPlot(data, reduction = "umap",
group.by = c("RNA_snn_res.0.8","condition","batch"))
print(p)
dev.off()
}
for (i in 4:20){
data<- FindNeighbors(data, dims = 1:i)
data <- FindClusters(data)
data <- RunUMAP(data, dims = 1:i, seed.use = 1)
pdf(paste0("../output/seed_1_v2/umap_louvain_seed_1_", i, ".pdf"))
p = DimPlot(data, reduction = "umap",
group.by = c("RNA_snn_res.0.8","condition","batch"))
print(p)
dev.off()
}
